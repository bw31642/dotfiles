;;; Compiled snippets and support files for `c++-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'c++-mode
		     '(("ACE_Svc" "class ${1:Sample} :\n  public ACE_Svc_Handler<ACE_SOCK_STREAM, ${2:ACE_NULL_SYNCH$$(yas/choose-value '(\"ACE_NULL_SYNCH\" \"ACE_MT_SYNCH\"))}>\n{\n  typedef ACE_Svc_Handler<ACE_SOCK_STREAM, $2> super;\n\npublic:\n  int open (void * = 0);\n\n  // Called when input is available from the client.\n  virtual int handle_input (ACE_HANDLE fd = ACE_INVALID_HANDLE);\n\n  // Called when output is possible.\n  virtual int handle_output (ACE_HANDLE fd = ACE_INVALID_HANDLE);\n\n  // Called when this handler is removed from the ACE_Reactor.\n  virtual int handle_close (ACE_HANDLE handle,\n                            ACE_Reactor_Mask close_mask);\n};\n\ntypedef ACE_Acceptor<$1, ACE_SOCK_ACCEPTOR> $1Acceptor;\n" "inherit ACE_Svc_Handler {}" nil nil nil nil nil nil)
		       ("ss" "#include <sstream>" "<sstream>" nil nil nil nil nil nil)
		       ("ass" "assert($0);" "assert" nil nil nil nil nil nil)
		       ("be" "${1:v}.begin(), $1.end" "v.begin(), v.end()" nil nil nil nil nil nil)
		       ("req" "BOOST_REQUIRE( ${1:condition} );\n$0" "boost_require" nil nil nil nil nil nil)
		       ("cass" "#include <cassert>\n$0" "cassert" nil nil nil nil nil nil)
		       ("cast" "${1:$$(yas/choose-value '(\"reinterpret_cast\" \"const_cast\" \"dynamic_cast\" \"static_cast\"))}<$2>($3)" "static_cast/dynamic_cast/..." nil nil nil nil nil nil)
		       ("err" "cerr << $0;\n" "cerr" nil nil nil nil nil nil)
		       ("cin" "cin >> $0;" "cin" nil nil nil nil nil nil)
		       ("class" "class ${1:Name} {\npublic:\n    ${2:${1:$(yas/substr text \"[^: ]*\")}($3);\n    virtual ~${1:$(yas/substr text \"[^: ]*\")}();}$0\n};" "class ... { ... }" nil nil nil nil nil nil)
		       ("c[" "const ${1:Type}& operator[](${2:int index}) const {\n$0\n}" "const_[]" nil nil nil nil nil nil)
		       ("ct" "${1:Class}::$1(${2:args}) ${3: : ${4:init}} {\n$0\n}" "constructor" nil nil nil nil nil nil)
		       ("cout" "std::cout << ${1:string} $0<< std::endl;" "cout" nil nil nil nil nil nil)
		       ("cpp" "#include \"`(file-name-nondirectory (file-name-sans-extension (buffer-file-name)))`.h\"" "include c++ header" nil nil nil nil nil nil)
		       ("cstd" "#include <cstdlib>" "cstd" nil nil nil nil nil nil)
		       ("d+=" "${1:MyClass}& operator+=(${2:const $1 &});" "d+=" nil nil nil nil nil nil)
		       ("[" "${1:Type}& operator[](${2:int index});" "d_operator[]" nil nil nil nil nil nil)
		       ("c[" "const ${1:Type}& operator[](${2:int index}) const;" "d_operator[]_const" nil nil nil nil nil nil)
		       ("<<" "friend std::ostream& operator<<(std::ostream&, const ${1:Class}&);" "d_operator<<" nil nil nil nil nil nil)
		       ("dl" "delete ${1:pointer};" "delete" nil nil nil nil nil nil)
		       ("dla" "delete[] ${1:arr};" "delete[]" nil nil nil nil nil nil)
		       ("doc" "/**\n * $0\n */" "doc" nil nil nil nil nil nil)
		       ("enum" "enum ${1:NAME}{\n$0\n};" "enum" nil nil nil nil nil nil)
		       ("erase" "${1:v}.erase(remove($1.begin(), $1.end(), ${2:0}), $1.end());" "idiom, Erase-remove idiom" nil nil nil nil nil nil)
		       ("erase.if" "${1:v}.erase(remove_if($1.begin(), $1.end(), ${2:func}), $1.end());" "idiom, Erase-remove-if idiom" nil nil nil nil nil nil)
		       ("fixt" "BOOST_FIXTURE_TEST_SUITE( ${1:name}, ${2:Fixture} )\n\n$0\n\nBOOST_AUTO_TEST_SUITE_END()" "fixture" nil nil nil nil nil nil)
		       ("fori" "for (${1:iter}=${2:var}.begin(); $1!=$2.end(); ++$1) {\n    $0\n}" "fori" nil nil nil nil nil nil)
		       ("fr" "friend $0;" "friend" nil nil nil nil nil nil)
		       ("f" "${1:type} ${2:name}(${3:args})${4: const};" "fun_declaration" nil nil nil nil nil nil)
		       ("f" "${1:type} ${2:Class}::${3:name}(${4:args})${5: const} {\n        $0\n}" "function" nil nil nil nil nil nil)
		       ("gtest" "#include <gtest/gtest.h>" "gtest" nil nil nil nil nil nil)
		       ("ignore" "${1:std::}cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');" "ignore" nil nil nil nil nil nil)
		       ("inccc" "#include <${1:$$(yas/choose-value '(\"iterator\" \"utility\" \"algorithm\" \"functional\" \"memory\" \"set\" \"map\" \"vector\" \"string\"))}>\n" "#include <...>" nil nil nil nil nil nil)
		       ("il" "inline $0" "inline" nil nil nil nil nil nil)
		       ("io" "#include <iostream>" "io" nil nil nil nil nil nil)
		       ("iter" "${1:std::}${2:vector<int>}::iterator ${3:iter};\n" "iterator" nil nil nil nil nil nil)
		       ("main" "int main(${1:int argc, char *argv[]})\n{\n    $0    \n    return 0;\n}\n" "main" nil nil nil nil nil nil)
		       ("map" "std::map<${1:type1}$0> ${2:var};" "map" nil nil nil nil nil nil)
		       ("ns" "namespace $1{\n    $0\n} // namespace $1" "namespace..{..}" nil nil nil nil nil nil)
		       ("!=" "bool ${1:MyClass}::operator!=(const $1 &other) const {\n    return !(*this == other);\n}" "operator!=" nil nil nil nil nil nil)
		       ("+" "${1:MyClass} $1::operator+(const $1 &other) {\n    $1 result = *this;\n    result += other;\n    return result;\n}" "operator+" nil nil nil nil nil nil)
		       ("+=" "${1:MyClass}& $1::operator+=(${2:const $1 &rhs}) {\n    $0\n    return *this;\n}" "operator+=" nil nil nil nil nil nil)
		       ("=" "${1:MyClass}& $1::operator=(const $1 &rhs) {\n    // Check for self-assignment!\n    if (this == &rhs)\n      return *this;\n    $0\n    return *this;\n}" "operator=" nil nil nil nil nil nil)
		       ("==" "bool ${1:MyClass}::operator==(const $1 &other) const {\n     $0\n}" "operator==" nil nil nil nil nil nil)
		       ("[]" "${1:Type}& operator[](${2:int index}) {\n    $0\n}" "operator[]" nil nil nil nil nil nil)
		       ("<<" "std::ostream& operator<<(std::ostream& s, const ${1:type}& ${2:c}) {\n    $0\n    return s;\n}" "operator<<" nil nil nil nil nil nil)
		       ("os" "#include <ostream>" "ostream" nil nil nil nil nil nil)
		       ("pr" "private:\n    $0" "private" nil nil nil nil nil nil)
		       ("pt" "protected:\n    $0" "protected" nil nil nil nil nil nil)
		       ("pb" "public:\n    $0" "public" nil nil nil nil nil nil)
		       ("std" "using namespace std;" "std" nil nil nil nil nil nil)
		       ("st" "std::$0" "std::" nil nil nil nil nil nil)
		       ("str" "#include <string>" "str" nil nil nil nil nil nil)
		       ("temp" "template <typename ${T}>" "template <typename ...>" nil nil nil nil nil nil)
		       ("tc" "BOOST_AUTO_TEST_CASE( ${1:test_case} )\n{\n    $0\n}" "test case" nil nil nil nil nil nil)
		       ("test_main" "int main(int argc, char **argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}" "test_main" nil nil nil nil nil nil)
		       ("ts" "BOOST_AUTO_TEST_SUITE( ${1:test_suite1} )\n\n$0\n\nBOOST_AUTO_TEST_SUITE_END()" "test_suite" nil nil nil nil nil nil)
		       ("th" "this" "this" nil nil nil nil nil nil)
		       ("throw" "throw ${1:MyError}($0);" "throw" nil nil nil nil nil nil)
		       ("tmain" "int ACE_TMAIN(int argc, ACE_TCHAR *argv[]){\n    $0\n    return 0;\n}\n" "int ACE_TMAIN(argc, argv) { ... }" nil nil nil nil nil nil)
		       ("trim" "std::string::iterator ${1:itr} = std::remove(${2:str}.begin(), $2.end(), ' ');\n$2.erase($1, $2.end());\n\n" "idiom, trim whitespace from std::string" nil nil nil nil nil nil)
		       ("try" "try {\n$1\n} catch (${2:std::exception& e}) {\n$3\n}" "try {...} catch(exception& e){...}" nil nil nil nil nil nil)
		       ("tryw" "try {\n    `(or yas/selected-text (car kill-ring))`\n} catch ${1:Exception} {\n\n}\n" "tryw" nil nil nil nil nil nil)
		       ("using" "using namespace ${std};\n$0" "using namespace ..." nil nil nil nil nil nil)
		       ("vec" "std::vector<${1:Class}> ${2:var}${3:(${4:10}, $1($5))};" "vector" nil nil nil nil nil nil)))


;;; Do not edit! File generated at Wed Apr 17 16:58:17 2013
